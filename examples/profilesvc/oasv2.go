// Code generated by kok; DO NOT EDIT.
// github.com/RussellLuo/kok

package profilesvc

import (
	"reflect"
	"strconv"

	"github.com/RussellLuo/kok/pkg/oasv2"
)

var (
	base = `swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger Example"
  description: ""
  license:
    name: "MIT"
host: "example.com"
basePath: "/api"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
`

	paths = `
paths:
  /profiles/{id}/addresses/{addressID}:
    delete:
      description: ""
      operationId: "DeleteAddress"
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ""
        - name: addressID
          in: path
          required: true
          type: string
          description: ""  
      %s
    get:
      description: ""
      operationId: "GetAddress"
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ""
        - name: addressID
          in: path
          required: true
          type: string
          description: ""  
      %s 
  /profiles/{id}:
    delete:
      description: ""
      operationId: "DeleteProfile"
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ""  
      %s
    get:
      description: ""
      operationId: "GetProfile"
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ""  
      %s
    patch:
      description: ""
      operationId: "PatchProfile"
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: "" 
        - name: body
          in: body
          schema:
            $ref: "#/definitions/PatchProfileRequestBody" 
      %s
    put:
      description: ""
      operationId: "PutProfile"
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: "" 
        - name: body
          in: body
          schema:
            $ref: "#/definitions/PutProfileRequestBody" 
      %s 
  /profiles/{id}/addresses:
    get:
      description: ""
      operationId: "GetAddresses"
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: ""  
      %s
    post:
      description: ""
      operationId: "PostAddress"
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: "" 
        - name: body
          in: body
          schema:
            $ref: "#/definitions/PostAddressRequestBody" 
      %s 
  /profiles:
    post:
      description: ""
      operationId: "PostProfile"
      parameters: 
        - name: body
          in: body
          schema:
            $ref: "#/definitions/PostProfileRequestBody" 
      %s  
`
)

func getResponses(schema oasv2.Schema) (resps []oasv2.OASResponses) {
	var success oasv2.Response
	var failures []oasv2.Response
	var resp oasv2.OASResponses

	success = schema.SuccessResponse("DeleteAddress", 200, &DeleteAddressResponse{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: 200,
		SchemaName: oasv2.GetSchemaName(success.ContentType, "DeleteAddressResponse"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("DeleteAddress")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "DeleteAddressResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

	success = schema.SuccessResponse("GetAddress", 200, &GetAddressResponse{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: 200,
		SchemaName: oasv2.GetSchemaName(success.ContentType, "GetAddressResponse"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("GetAddress")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "GetAddressResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

	success = schema.SuccessResponse("DeleteProfile", 200, &DeleteProfileResponse{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: 200,
		SchemaName: oasv2.GetSchemaName(success.ContentType, "DeleteProfileResponse"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("DeleteProfile")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "DeleteProfileResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

	success = schema.SuccessResponse("GetProfile", 200, &GetProfileResponse{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: 200,
		SchemaName: oasv2.GetSchemaName(success.ContentType, "GetProfileResponse"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("GetProfile")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "GetProfileResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

	success = schema.SuccessResponse("PatchProfile", 200, &PatchProfileResponse{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: 200,
		SchemaName: oasv2.GetSchemaName(success.ContentType, "PatchProfileResponse"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("PatchProfile")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "PatchProfileResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

	success = schema.SuccessResponse("PutProfile", 200, &PutProfileResponse{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: 200,
		SchemaName: oasv2.GetSchemaName(success.ContentType, "PutProfileResponse"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("PutProfile")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "PutProfileResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

	success = schema.SuccessResponse("GetAddresses", 200, &GetAddressesResponse{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: 200,
		SchemaName: oasv2.GetSchemaName(success.ContentType, "GetAddressesResponse"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("GetAddresses")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "GetAddressesResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

	success = schema.SuccessResponse("PostAddress", 200, &PostAddressResponse{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: 200,
		SchemaName: oasv2.GetSchemaName(success.ContentType, "PostAddressResponse"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("PostAddress")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "PostAddressResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

	success = schema.SuccessResponse("PostProfile", 200, &PostProfileResponse{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: 200,
		SchemaName: oasv2.GetSchemaName(success.ContentType, "PostProfileResponse"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("PostProfile")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "PostProfileResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

	return
}

func getDefinitions(schema oasv2.Schema) map[string]oasv2.Definition {
	defs := make(map[string]oasv2.Definition)

	var success oasv2.Response
	var failures []oasv2.Response

	success = schema.SuccessResponse("DeleteAddress", 200, &DeleteAddressResponse{})
	oasv2.AddDefinition(defs, "DeleteAddressResponse", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("DeleteAddress")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "DeleteAddressResponseError"+strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

	success = schema.SuccessResponse("DeleteProfile", 200, &DeleteProfileResponse{})
	oasv2.AddDefinition(defs, "DeleteProfileResponse", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("DeleteProfile")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "DeleteProfileResponseError"+strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

	success = schema.SuccessResponse("GetAddress", 200, &GetAddressResponse{})
	oasv2.AddDefinition(defs, "GetAddressResponse", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("GetAddress")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "GetAddressResponseError"+strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

	success = schema.SuccessResponse("GetAddresses", 200, &GetAddressesResponse{})
	oasv2.AddDefinition(defs, "GetAddressesResponse", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("GetAddresses")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "GetAddressesResponseError"+strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

	success = schema.SuccessResponse("GetProfile", 200, &GetProfileResponse{})
	oasv2.AddDefinition(defs, "GetProfileResponse", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("GetProfile")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "GetProfileResponseError"+strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

	oasv2.AddDefinition(defs, "PatchProfileRequestBody", reflect.ValueOf(&struct {
		Profile Profile `json:"profile"`
	}{}))
	success = schema.SuccessResponse("PatchProfile", 200, &PatchProfileResponse{})
	oasv2.AddDefinition(defs, "PatchProfileResponse", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("PatchProfile")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "PatchProfileResponseError"+strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

	oasv2.AddDefinition(defs, "PostAddressRequestBody", reflect.ValueOf(&struct {
		Address Address `json:"address"`
	}{}))
	success = schema.SuccessResponse("PostAddress", 200, &PostAddressResponse{})
	oasv2.AddDefinition(defs, "PostAddressResponse", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("PostAddress")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "PostAddressResponseError"+strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

	oasv2.AddDefinition(defs, "PostProfileRequestBody", reflect.ValueOf(&struct {
		Profile Profile `json:"profile"`
	}{}))
	success = schema.SuccessResponse("PostProfile", 200, &PostProfileResponse{})
	oasv2.AddDefinition(defs, "PostProfileResponse", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("PostProfile")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "PostProfileResponseError"+strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

	oasv2.AddDefinition(defs, "PutProfileRequestBody", reflect.ValueOf(&struct {
		Profile Profile `json:"profile"`
	}{}))
	success = schema.SuccessResponse("PutProfile", 200, &PutProfileResponse{})
	oasv2.AddDefinition(defs, "PutProfileResponse", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("PutProfile")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "PutProfileResponseError"+strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

	return defs
}

func OASv2APIDoc(schema oasv2.Schema) string {
	resps := getResponses(schema)
	paths := oasv2.GenPaths(resps, paths)

	defs := getDefinitions(schema)
	definitions := oasv2.GenDefinitions(defs)

	return base + paths + definitions
}
