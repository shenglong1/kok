package oasv2

import (
	"fmt"
	"strings"

	"github.com/RussellLuo/kok/gen/util/generator"
	"github.com/RussellLuo/kok/gen/util/misc"
	"github.com/RussellLuo/kok/gen/util/openapi"
	"github.com/RussellLuo/kok/gen/util/reflector"
)

var (
	template = `// Code generated by kok; DO NOT EDIT.
// github.com/RussellLuo/kok

package {{.Result.PkgName}}

import (
	"bufio"
	"bytes"
	"fmt"
	"net/http"
	"net/http/httptest"
	"reflect"
	"strings"
	"text/template"

	chimiddleware "github.com/go-chi/chi/middleware"
	httpcodec "github.com/RussellLuo/kok/pkg/codec/httpv2"
	"github.com/RussellLuo/kok/pkg/oasv2"
)

var (
	base = ` + "`" + `swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger Example"
  description: ""
  license:
    name: "MIT"
host: "example.com"
basePath: "/api"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
` + "`" + `

{{- $operationsGroupByPattern := operationsGroupByPattern .Spec.Operations}}

	paths = ` + "`" + `
paths:
{{- range $operationsGroupByPattern}}
  {{.Pattern}}:

  {{- range .Operations}}
  {{- $nonCtxParams := nonCtxParams .Request.Params}}
    {{lower .Method}}:
      description: ""
      operationId: "{{.Name}}"
      {{- $nonCtxNonBodyParams := nonBodyParams $nonCtxParams}}
      {{- if $nonCtxParams}}
      parameters:
        {{- range $nonCtxNonBodyParams}}
        - name: {{.Alias}}
          in: {{.In}}
          required: {{.Required}}
          {{paramSchema .Type}}
          description: ""
        {{- end}} {{/* range $nonCtxNonBodyParams */}}

        {{- $bodyParams := bodyParams $nonCtxParams}}
        {{- if $bodyParams}}
        - name: body
          in: body
          schema:
            $ref: "#/definitions/{{.Name}}RequestBody"
        {{- end}}
      {{- end}} {{/* if $nonCtxParams */}}
      %s
  {{- end}} {{/* range .Operations */}}

{{- end}} {{/* range $operationsGroupByPattern */}}
` + "`" + `
)

func getResponses(schema oasv2.Schema) (resps []oasv2.OASResponses) {
	var success oasv2.Response
	var failures []oasv2.Response
	var resp oasv2.OASResponses

	{{range $operationsGroupByPattern -}}
	{{range .Operations -}}

	success = schema.SuccessResponse("{{.Name}}", {{.SuccessResponse.StatusCode}}, {{addAmpersand .Name}}Response{})
	resp = oasv2.OASResponses{ContentTypes: map[string]bool{}}
	resp.Success = oasv2.OASResponse{
		StatusCode: {{.SuccessResponse.StatusCode}},
		SchemaName: oasv2.GetSchemaName(success.ContentType, "{{.Name}}Response"),
	}
	resp.ContentTypes[success.ContentType] = true
	failures = schema.FailureResponses("{{.Name}}")
	for _, failure := range failures {
		resp.Failures = append(resp.Failures, oasv2.OASResponse{
			StatusCode: failure.StatusCode,
			SchemaName: "{{.Name}}ResponseError" + strconv.Itoa(failure.StatusCode),
		})
	}
	resps = append(resps, resp)

    {{end -}} {{/* range .Operations */}}
    {{end -}} {{/* range $operationsGroupByPattern */}}

	return
}

func getDefinitions(schema oasv2.Schema) map[string]oasv2.Definition {
	defs := make(map[string]oasv2.Definition)

	var success oasv2.Response
	var failures []oasv2.Response

	{{range .Spec.Operations -}}

    {{- $nonCtxParams := nonCtxParams .Request.Params}}
    {{- $bodyParams := bodyParams $nonCtxParams}}
	{{- if $bodyParams}}
	oasv2.AddDefinition(defs, "{{.Name}}RequestBody", reflect.ValueOf(&struct{
		{{- range $bodyParams}}
		{{title .Name}} {{.Type}} {{addTag .Name .Type}}
		{{- end}} {{/* range $bodyParams */}}
	}{}))
	{{- end}} {{/* if $bodyParams */}}
	success = schema.SuccessResponse("{{.Name}}", {{.SuccessResponse.StatusCode}}, {{addAmpersand .Name}}Response{})
	oasv2.AddDefinition(defs, "{{.Name}}Response", reflect.ValueOf(success.Body))
	failures = schema.FailureResponses("{{.Name}}")
	for _, failure := range failures {
		oasv2.AddDefinition(defs, "{{.Name}}ResponseError" + strconv.Itoa(failure.StatusCode), reflect.ValueOf(failure.Body))
	}

    {{end -}} {{/* range .Spec.Operations */}}

	return defs
}

func OASv2APIDoc(schema oasv2.Schema) string {
	resps := getResponses(schema)
	paths := oasv2.GenPaths(resps, paths)

	defs := getDefinitions(schema)
	definitions := oasv2.GenDefinitions(defs)

	return base + paths + definitions
}
`
)

type Options struct {
	SchemaPtr         bool
	SchemaTag         string
	TagKeyToSnakeCase bool
	Formatted         bool
}

type Generator struct {
	opts *Options
}

func New(opts *Options) *Generator {
	return &Generator{opts: opts}
}

func (g *Generator) Generate(result *reflector.Result, spec *openapi.Specification) ([]byte, error) {
	data := struct {
		Result *reflector.Result
		Spec   *openapi.Specification
	}{
		Result: result,
		Spec:   spec,
	}

	type OperationsPerPattern struct {
		Pattern    string
		Operations []*openapi.Operation
	}

	return generator.Generate(template, data, generator.Options{
		Funcs: map[string]interface{}{
			"title": strings.Title,
			"lower": strings.ToLower,
			"operationsGroupByPattern": func(ops []*openapi.Operation) (outOps []*OperationsPerPattern) {
				var opp *OperationsPerPattern
				var ok bool

				patternToOps := make(map[string]*OperationsPerPattern)

				for _, op := range ops {
					opp, ok = patternToOps[op.Pattern]
					if !ok {
						opp = &OperationsPerPattern{Pattern: op.Pattern}
						outOps = append(outOps, opp)
						patternToOps[op.Pattern] = opp
					}
					opp.Operations = append(opp.Operations, op)
				}

				return
			},
			"paramSchema": func(typ string) string {
				switch typ {
				case "int", "int8", "int16", "int32", "int64",
					"uint", "uint8", "uint16", "uint32", "uint64":
					return "type: integer"
				case "string":
					return "type: string"
				default:
					return fmt.Sprintf(`$ref: "#/definitions/%s"`, typ)
				}
			},
			"nonCtxParams": func(params []*openapi.Param) (out []*openapi.Param) {
				for _, p := range params {
					if p.Type != "context.Context" {
						out = append(out, p)
					}
				}
				return
			},
			"nonBodyParams": func(in []*openapi.Param) (out []*openapi.Param) {
				for _, p := range in {
					if p.In != openapi.InBody {
						out = append(out, p)
					}
				}
				return
			},
			"bodyParams": func(in []*openapi.Param) (out []*openapi.Param) {
				for _, p := range in {
					if p.In == openapi.InBody {
						out = append(out, p)
					}
				}
				return
			},
			"addAmpersand": func(name string) string {
				if g.opts.SchemaPtr {
					return "&" + name
				}
				return name
			},
			"addTag": func(name, typ string) string {
				if g.opts.SchemaTag == "" {
					return ""
				}

				if typ == "error" {
					name = "-"
				} else if g.opts.TagKeyToSnakeCase {
					name = misc.ToSnakeCase(name)
				}

				return fmt.Sprintf("`%s:\"%s\"`", g.opts.SchemaTag, name)
			},
		},
		Formatted: g.opts.Formatted,
	})
}
